From LoginController 

/* --- Basic steps in MVC can be seen below used the same method(gotoLoginPage) and developed further so commenting this for understanding
private Logger logger = LoggerFactory.getLogger(getClass()); //with help of this we can get the logs while running code, as it is not recommended print them

//http://localhost:8080/login?name=Kittu
//Model - it passes data from controller to jsp(i.e view) -@ModelMap annot
@RequestMapping("/login")
public String gotoLoginPage(@RequestParam String name, ModelMap model){ //@RequestParam annot helps us to get the value from the url to controller code
	model.put("name", name);
	logger.debug("Request param is {}",name);
	logger.info("I want this printed at info level");
	logger.warn("I want this printed at warn level");
	
	System.out.println("Request param is "+ name); //not recommended for prod code
	
	return "login";
}*/

	@RequestMapping(value="login", method = RequestMethod.POST)
	//login?name=Kittu @RequestParam can capture query data and form data 
	public String gotoWelcomePage(@RequestParam String name, @RequestParam String password, ModelMap model){ 
		
	if(authenticationService.authenticate(name, password)) {
		model.put("name", name);
		
		//model.put("password", password);
		//Authentication
		//name - kittuTutor password - dummy
		
		return "welcome";
	}else {
		model.put("errorMessage", "Invalid Credentials! Try again");
		return "login";
	}
	
		//@Autowired --this annot is not required as dependency is injected via constructor
	private AuthenticationService authenticationService;
	
	
	public LoginController(AuthenticationService authenticationService) {
	super();
	this.authenticationService = authenticationService;
}
	
	
From AuthenticationService clas


	public boolean authenticate(String username, String password) {
		
		boolean isValidUserName = username.equalsIgnoreCase("kittuTutor");
		boolean isValidPassword = password.equalsIgnoreCase("dummy");
		
		
		return isValidUserName && isValidPassword;
		
	}
	
	
	login.jsp
	
	<html>
<head>
<title>Welcome Page</title>
</head>
<body>
	<div class="container">
		<h1>Login</h1>

		<pre>${errorMessage}</pre>
		<form method="post">
			Name: <input type="text" name=name> 
			Password: <input type="password" name=password> 
			<input type="submit">
		</form>

	</div>
</body>

</html>

aplication.properties

spring.application.name=myfirstwebapp
#server.port=8081
#spring.mvc.view.prefix=/src/main/resources/META-INF/resources/WEB-INF/jsp/ NOTE: spring already knows location till resources so we can add later path
#BELOW PREFIX AND SUFFIX ARE VIEWREOLVER
#/WEB-INF/jsp/login.jsp ==> view Resolver maps specific jsp example login (Dispatcher servlet talks to view resolver)
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

#debug = developer level, info= production
logging.level.org.springframework=debug

#debug - prints debug,info and warn ==> info - info and warn always gives below levels

#we can externally define logging on our own packages as below
logging.level.com.prep.springboot.myfirstwebapp=info

spring.mvc.format.date=yyyy-MM-dd

spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.jpa.defer-datasource-initialization=true
#spring.jpa.show-sql=true